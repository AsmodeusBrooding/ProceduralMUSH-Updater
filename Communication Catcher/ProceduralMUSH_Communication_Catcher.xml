<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, July 03, 2019, 11:29 PM -->
<!-- MuClient version 5.06-pre -->
  
<!-- Plugin "CleftMUSH_Talk" generated by Plugin Wizard -->
  
<muclient>
<plugin
   name="ProceduralMUSH_CommCatcher"
   id="84164fd114202591729cb51b"
   language="Lua"
   purpose="move messages from main window to comm log"
   save_state="y"
   date_written="2022-10-20 23:28:32"
   requires="5.06"
   version="6.40"
   >
  
</plugin>
  
  
<!--  Get our standard constants -->
  
<include name="constants.lua"/>



<!--  Aliases  -->

<aliases>
<alias
	name="comm_checker"
	sequence="100"
	match="commcheck"
	enabled="y"
	send_to="12"
	ignore_case="y"><send>commcheck()
</send></alias>
<alias
	sequence="100"
	match="chat check"
	enabled="y"
	send_to="12"
	ignore_case="y"><send>commcheck()
</send></alias>
<alias
	sequence="100"
	match="chat help"
	enabled="y"
	send_to="12"
	ignore_case="y"><send>chathelp()
</send></alias>

<!--  Set channels to tab number  -->
<alias enabled="y"
    sequence="100"
    match="set tells tab *"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
SetVariable("tells_tab", %1)
util.print("{GTells have been set to tab %1.")
</send></alias>
<alias enabled="y"
    sequence="100"
    match="set gossip tab *"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
SetVariable("gossip_tab", %1)
util.print("{GThe gossip channel has been set to tab %1.")
</send></alias>
<alias enabled="y"
    sequence="100"
    match="set quote tab *"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
SetVariable("quote_tab", %1)
util.print("{GThe Quote channel has been set to tab %1.")
</send></alias>
<alias enabled="y"
    sequence="100"
    match="set grouptell tab *"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
SetVariable("grouptell_tab", %1)
util.print("{GGrouptells have been set to tab %1.")
</send></alias>
<alias enabled="y"
    sequence="100"
    match="set trade tab *"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
SetVariable("trade_tab", %1)
util.print("{GThe trade channel has been set to tab %1.")
</send></alias>
<alias enabled="y"
    sequence="100"
    match="set clan tab *"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
SetVariable("clan_tab", %1)
util.print("{GThe Clan channel has been set to tab %1.")
</send></alias>
<alias enabled="y"
    sequence="100"
    match="set newbies tab *"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
SetVariable("newbies_tab", %1)
SaveState()
util.print("{GThe newbies channel has been set to tab %1.")
</send></alias>
<alias enabled="y"
    sequence="100"
    match="set says tab *"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
SetVariable("says_tab", %1)
util.print("{GSays have been set to tab %1.")
</send></alias>
<alias enabled="y"
    sequence="100"
    match="set info tab *"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
SetVariable("info_tab", %1)
util.print("{GThe Info channel has been set to tab %1.")
</send></alias>
<alias enabled="y"
    sequence="100"
    match="set discord tab *"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
SetVariable("discord_tab", %1)
util.print("{GThe Discord channel has been set to tab %1.")
</send></alias>
<alias enabled="y"
    sequence="100"
    match="set shout tab *"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
SetVariable("shout_tab", %1)
util.print("{GShouts have been set to tab %1.")
</send></alias>
<alias enabled="y"
    sequence="100"
    match="set yell tab *"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
SetVariable("yell_tab", %1)
util.print("{GYells have been set to tab %1.")
</send></alias>
<alias enabled="y"
    sequence="100"
    match="set yell tab *"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
SetVariable("yell_tab", %1)
util.print("{GYells have been set to tab %1.")
</send></alias>
<!--  Mute channels from main output  -->
<alias enabled="y"
    sequence="100"
    match="mute tells"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
if GetTriggerOption ("send_tell", "omit_from_output") == 1 then
SetTriggerOption ("send_tell", "omit_from_output", 0)
SetTriggerOption ("get_tell", "omit_from_output", 0)
SetVariable("tells_visible", "Yes")
util.print("{GTells are now visible in the main output.")
elseif GetTriggerOption ("send_tell", "omit_from_output") == 0 then
SetTriggerOption ("send_tell", "omit_from_output", 1)
SetTriggerOption ("get_tell", "omit_from_output", 1)
SetVariable("tells_visible", "No")
util.print("{GTells are now hidden from the main output.")
end

</send></alias>
<alias enabled="y"
    sequence="100"
    match="mute clan"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
if GetTriggerOption ("send_clan", "omit_from_output") == 1 then
SetTriggerOption ("send_clan", "omit_from_output", 0)
SetVariable("clan_visible", "Yes")
util.print("{GClan tells are now visible in the main output.")
elseif GetTriggerOption ("send_clan", "omit_from_output") == 0 then
SetTriggerOption ("send_clan", "omit_from_output", 1)
SetVariable("clan_visible", "No")
util.print("{GClan tells are now hidden from the main output.")
end
</send></alias>
<alias enabled="y"
    sequence="100"
    match="mute newbies"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
if GetTriggerOption ("send_newbies", "omit_from_output") == 1 then
SetTriggerOption ("send_newbies", "omit_from_output", 0)
SetTriggerOption ("get_newbies", "omit_from_output", 0)
SetVariable("newbies_visible", "Yes")
util.print("{GThe newbies channel is now visible in the main output.")
elseif GetTriggerOption ("send_newbies", "omit_from_output") == 0 then
SetTriggerOption ("send_newbies", "omit_from_output", 1)
SetTriggerOption ("get_newbies", "omit_from_output", 1)
SetVariable("newbies_visible", "No")
util.print("{GThe newbies channel is now hidden from the main output.")
end

</send></alias>
<alias enabled="y"
    sequence="100"
    match="mute quote"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
if GetTriggerOption ("send_quote", "omit_from_output") == 1 then
SetTriggerOption ("send_quote", "omit_from_output", 0)
SetTriggerOption ("get_quote", "omit_from_output", 0)
SetVariable("quote_visible", "Yes")
util.print("{GThe quote channel is now visible in the main output.")
elseif GetTriggerOption ("send_quote", "omit_from_output") == 0 then
SetTriggerOption ("send_quote", "omit_from_output", 1)
SetTriggerOption ("get_quote", "omit_from_output", 1)
SetVariable("quote_visible", "No")
util.print("{GThe quote channel is now hidden from the main output.")
end

</send></alias>
<alias enabled="y"
    sequence="100"
    match="mute grouptell"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
if GetTriggerOption ("get_grouptell", "omit_from_output") == 1 then
SetTriggerOption ("get_grouptell", "omit_from_output", 0)
SetVariable("grouptell_visible", "Yes")
util.print("{GGrouptells are now visible in the main output.")
elseif GetTriggerOption ("get_grouptell", "omit_from_output") == 0 then
SetTriggerOption ("get_grouptell", "omit_from_output", 1)
SetVariable("grouptell_visible", "No")
util.print("{GGrouptells are now hidden from the main output.")
end

</send></alias>
<alias enabled="y"
    sequence="100"
    match="mute gossip"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
if GetTriggerOption ("send_gossip", "omit_from_output") == 1 then
SetTriggerOption ("send_gossip", "omit_from_output", 0)
SetTriggerOption ("get_gossip", "omit_from_output", 0)
SetVariable("gossip_visible", "Yes")
util.print("{GThe gossip channel is now visible in the main output.")
elseif GetTriggerOption ("send_gossip", "omit_from_output") == 0 then
SetTriggerOption ("send_gossip", "omit_from_output", 1)
SetTriggerOption ("get_gossip", "omit_from_output", 1)
SetVariable("gossip_visible", "No")
util.print("{GThe gossip channel is now hidden from the main output.")
end

</send></alias>
<alias enabled="y"
    sequence="100"
    match="mute trade"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
if GetTriggerOption ("get_trade", "omit_from_output") == 1 then
SetTriggerOption ("get_trade", "omit_from_output", 0)
SetVariable("trade_visible", "Yes")
util.print("{GThe trade channel is now visible in the main output.")
elseif GetTriggerOption ("get_trade", "omit_from_output") == 0 then
SetTriggerOption ("get_trade", "omit_from_output", 1)
SetVariable("trade_visible", "No")
util.print("{GThe trade channel is now hidden from the main output.")
end

</send></alias>
<alias enabled="y"
    sequence="100"
    match="mute discord"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
if GetTriggerOption ("get_discord", "omit_from_output") == 1 then
SetTriggerOption ("get_discord", "omit_from_output", 0)
SetVariable("discord_visible", "Yes")
util.print("{GThe Discord channel is now visible in the main output.")
elseif GetTriggerOption ("get_discord", "omit_from_output") == 0 then
SetTriggerOption ("get_discord", "omit_from_output", 1)
SetVariable("discord_visible", "No")
util.print("{GThe Discord channel is now hidden from the main output.")
end

</send></alias>
<alias enabled="y"
    sequence="100"
    match="mute says"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
if GetTriggerOption ("send_says", "omit_from_output") == 1 then
SetTriggerOption ("send_says", "omit_from_output", 0)
SetTriggerOption ("get_osays", "omit_from_output", 0)
SetTriggerOption ("send_osays", "omit_from_output", 0)
SetVariable("says_visible", "Yes")
util.print("{GSays are now visible in the main output.")
elseif GetTriggerOption ("send_says", "omit_from_output") == 0 then
SetTriggerOption ("send_says", "omit_from_output", 1)
SetTriggerOption ("get_osays", "omit_from_output", 1)
SetTriggerOption ("send_osays", "omit_from_output", 1)
SetVariable("says_visible", "No")
util.print("{GSays are now hidden from the main output.")
end

</send></alias>
<alias enabled="y"
    sequence="100"
    match="mute info"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
if GetTriggerOption ("info_level", "omit_from_output") == 1 then
SetTriggerOption ("info_level", "omit_from_output", 0)
SetTriggerOption ("info_kill", "omit_from_output", 0)
SetTriggerOption ("info_login", "omit_from_output", 0)
SetTriggerOption ("info_logout", "omit_from_output", 0)
SetVariable("info_visible", "Yes")
util.print("{GINFO is now visible in the main output.")
elseif GetTriggerOption ("info_level", "omit_from_output") == 0 then
SetTriggerOption ("info_level", "omit_from_output", 1)
SetTriggerOption ("info_kill", "omit_from_output", 1)
SetTriggerOption ("info_login", "omit_from_output", 1)
SetTriggerOption ("info_logout", "omit_from_output", 1)
SetVariable("info_visible", "No")
util.print("{GINFO is now hidden from the main output.")
end

</send></alias>
<alias enabled="y"
    sequence="100"
    match="mute shout"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
if GetTriggerOption ("send_shout", "omit_from_output") == 1 then
SetTriggerOption ("send_shout", "omit_from_output", 0)
SetTriggerOption ("get_shout", "omit_from_output", 0)
SetVariable("shout_visible", "Yes")
util.print("{GShouting is now visible in the main output.")
elseif GetTriggerOption ("send_shout", "omit_from_output") == 0 then
SetTriggerOption ("send_shout", "omit_from_output", 1)
SetTriggerOption ("get_shout", "omit_from_output", 1)
SetVariable("shout_visible", "No")
util.print("{GShouting is now hidden from the main output.")
end
</send></alias>
<alias enabled="y"
    sequence="100"
    match="mute yell"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
if GetTriggerOption ("send_yell", "omit_from_output") == 1 then
SetTriggerOption ("send_yell", "omit_from_output", 0)
SetTriggerOption ("get_yell", "omit_from_output", 0)
SetVariable("yell_visible", "Yes")
util.print("{GYelling is now visible in the main output.")
elseif GetTriggerOption ("send_yell", "omit_from_output") == 0 then
SetTriggerOption ("send_yell", "omit_from_output", 1)
SetTriggerOption ("get_yell", "omit_from_output", 1)
SetVariable("yell_visible", "No")
util.print("{GYelling is now hidden from the main output.")
end
</send></alias>
<alias enabled="y"
    sequence="100"
    match="mute all"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>muteall()
</send></alias>
	<alias enabled="n"
    name="ferryinfotoggle"
    sequence="100"
    match="ferryinfo"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>EnableTrigger ("ferryinfo1", (GetTriggerOption("ferryinfo1", "enabled")+1)%%2)
	EnableTrigger ("ferryinfo2", (GetTriggerOption("ferryinfo2", "enabled")+1)%%2)
ColourNote ("red", "black", "Ferry Info is enabled: " .. tostring(GetTriggerOption("ferryinfo1", "enabled") == 1))
</send></alias>
	<alias enabled="y"
    name="printshite"
    sequence="100"
    match="print date"
    send_to="14"
    regexp="n"
    ignore_case="y"><send>
date_format = GetPluginVariable("b555825a4a5700c35fa80780", "date_format")
print("Date Format: ", date_format)
</send></alias>
</aliases>

<!--  Triggers  -->

<triggers>

<trigger
   enabled="y"
   match="Asmodeus tells you, 'version'"
   omit_from_output="y"
   regexp="n"
   send_to="14"
   sequence="100"
  >
  </trigger>

<trigger
   enabled="y"
   match="You reply to *, 'CleftMUSH *'"
   omit_from_output="y"
   omit_from_log="y"
   regexp="n"
   send_to="14"
   sequence="100"
  >
  </trigger>

<trigger
   enabled="n"
   match="\You tell ([a-zA-Z]+)\ '(.+)'$"
   regexp="y"
   script="tells"
   sequence="100"
    omit_from_output="n"
>
</trigger>
<trigger
   enabled="y"
   name="send_tracker"
   match="@w[Tracker]: *"
   regexp="n"
   script="tracker"
   sequence="100"
    omit_from_output="y"
><send>[Tracker]: %1</send>
</trigger>
<trigger
   enabled="y"
   match="* tells you, '*'"
   script="tells"
   sequence="100"
   omit_from_output="n">
</trigger>
<trigger
   enabled="y"
   name="send_clan"
   match="* Clans '*'"
   script="clan"
   sequence="100"
   omit_from_output="n">
</trigger>
<trigger
    enabled="y"
    name="send_newbies"
    match="You newbie, '*'"
    script="newbies"
    regexp="n"
    omit_from_output="n"
    sequence="100">
</trigger>
<trigger
    enabled="y"
    name="send_quote"
    match="You quote '*'"
    script="quote"
    regexp="n"
    omit_from_output="n"
    sequence="100">
</trigger>
<trigger
    enabled="y"
    name="get_quote"
    match="* quotes '*'"
    script="quote"
    regexp="n"
    omit_from_output="n"
    sequence="100">
</trigger>
<trigger
    enabled="y"
    name="get_grouptell"
    match="* <Group> '*'"
   script="grouptell"
    omit_from_output="n"
    sequence="100"
    ></trigger>
<trigger
    enabled="y"
    name="info_logout"
    match="(] * has escaped from the Cleft of Dimensions. [)"
   script="info"
    omit_from_output="n"
    sequence="100"
    ></trigger>
<trigger
    enabled="y"
    name="info_level"
    match="[Announcement]*."
    script="info"
    omit_from_output="y"
    sequence="100"
    ></trigger>
<trigger
    enabled="y"
    match="^INFO: $"
    regexp="y"
    omit_from_output="y"
    sequence="100"
    ></trigger>
<trigger
    enabled="y"
    name="info_kill"
    match="INFO: =MORE=  * has been slaughtered by *.  =BLOOD="
    script="info"
    omit_from_output="n"
    sequence="100"
    ></trigger>
<trigger
    enabled="n"
    match="INFO: "
    omit_from_output="y"
    sequence="100"
    ></trigger>
<trigger
    enabled="y"
    name="info_login"
    match="(] * has fallen into the Cleft of Dimensions. [)"
    script="info"
    omit_from_output="n"
    sequence="100"
    ></trigger>
<trigger
    enabled="n"
    match="A loud horn sounds off from the bay, signaling the arrival of a large vessel."
    keep_evaluating="y"
    omit_from_output="y"
    sequence="100"
    send_to="12"
    >
<send>ColourTell (
"red", "black", "[",
"white", "black", "Ferry Info",
"red", "black", "]",
"white", "black", " The ",
"yellow","black", "S.S. ZELBESS",
"white", "black", " will arrive in one minute!")</send></trigger>
<trigger
    enabled="n"
	group="ferryinfo"
	name="ferryinfo1"
    match="A loud horn sounds off from the bay, signaling the arrival of a large vessel."
    omit_from_output="y"
    sequence="100"
    send_to="14"
    ><send>Execute("tracker {R[{WFerry Info{R]{W The {YS.S. ZELBESS {Wwill arrive in one minute!")</send></trigger>
<trigger
    enabled="n"
	group="ferryinfo"
	name="ferryinfo2"
    match="A loud horn sounds off from the harbor, signaling the departure of a large vessel."
    omit_from_output="y"
    sequence="100"
    send_to="14"
    ><send>Execute("tracker {R[{WFerry Info{R]{W The {YS.S. ZELBESS {Whas departed!")</send></trigger>
<trigger
    enabled="y"
    name="get_newbies"
    regexp="y"
    match="(?<player>\b\w+(?<!@discord)\b) newbies, '(?<message>.*)'"
   script="gossip"
    omit_from_output="y"
    sequence="100"
    send_to="14"
    ><send>
    message = GetTriggerWildcard ("get_newbies", "message") or nil  -- get wildcard named 'rarity'
    player = GetTriggerWildcard ("get_newbies", "player") or nil  -- get wildcard named 'rarity'
    util.print("@Y"..player.." @Mnewbies, '@w"..message.."@M'")
    local text = "@Y"..player.." @Mnewbies, '@w"..message.."@M'"
    SendToCommLog(text)</send></trigger>
    <trigger
    enabled="y"
    name="get_gossip"
    regexp="y"
    match="(?<player>\b\w+(?<!@discord)\b) gossips, '(?<message>.*)'"
   script="gossip"
    omit_from_output="y"
    sequence="100"
    send_to="14"
    ><send>
    message = GetTriggerWildcard ("get_gossip", "message") or nil  -- get wildcard named 'rarity'
    player = GetTriggerWildcard ("get_gossip", "player") or nil  -- get wildcard named 'rarity'
    util.print("@Y"..player.."@Y gossips, '"..message.."'")
    local text = "@Y"..player.." @Ygossips, '"..message.."'"
    SendToCommLog(text)</send></trigger>
    <trigger
    enabled="y"
    name="get_gossip2"
    regexp="y"
    match="(?<player>\w+)@discord gossips, '(?<message>.*)'"
   script="gossip"
    omit_from_output="y"
    sequence="100"
    send_to="14"
    ><send>
    message = GetTriggerWildcard ("get_gossip2", "message") or nil  -- get wildcard named 'rarity'
    player = GetTriggerWildcard ("get_gossip2", "player") or nil  -- get wildcard named 'rarity'
    util.print("@x238[@x023D@x029I@x035S@x036C@x029OR@x023D@x238] @Y"..player.." gossips, '"..message.."'")
    local text = "@x238[@x023D@x029I@x035S@x036C@x029OR@x023D@x238] @Y"..player.." gossips, '"..message.."'"
    SendToCommLog(text)</send></trigger>
    <trigger
    enabled="y"
    name="get_newbies2"
    regexp="y"
    match="(?<player>\w+)@discord newbies, '(?<message>.*)'"
   script="gossip"
    omit_from_output="y"
    sequence="100"
    send_to="14"
    ><send>
    message = GetTriggerWildcard ("get_newbies2", "message") or nil  -- get wildcard named 'rarity'
    player = GetTriggerWildcard ("get_newbies2", "player") or nil  -- get wildcard named 'rarity'
    util.print("@x238[@x023D@x029I@x035S@x036C@x029OR@x023D@x238] @Y"..player.." @Mnewbies, '@w"..message.."@M'")
    local text = "@x238[@x023D@x029I@x035S@x036C@x029OR@x023D@x238] @Y"..player.." @Mnewbies, '@w"..message.."@M'"
    SendToCommLog(text)</send></trigger>   
<trigger
    enabled="y"
    name="send_gossip"
    match="*ou gossip, '*'"
    script="gossip"
    omit_from_output="y"
    sequence="100"
    send_to="14"
    ><send>util.print("@YYou gossip, "..tostring("%2").."")
    local text = "@YYou gossip, '"..tostring("%2").."'"
    SendToCommLog(text)</send></trigger>
    <trigger
    enabled="y"
    name="get_trade"
    regexp="y"
    match="(?<player>\b\w+(?<!@discord)\b) trades, '(?<message>.*)'"
   script="gossip"
    omit_from_output="y"
    sequence="100"
    send_to="14"
    ><send>
    message = GetTriggerWildcard ("get_trade", "message") or nil  -- get wildcard named 'rarity'
    player = GetTriggerWildcard ("get_trade", "player") or nil  -- get wildcard named 'rarity'
    util.print("@Y"..player.." @x202trades, '"..message.."@x202'")
    local text = "@Y"..player.." @x202trades, '"..message.."@x202'"
    SendToCommLog(text)</send></trigger>
    <trigger
    enabled="y"
    name="get_trade2"
    regexp="y"
    match="(?<player>\w+)@discord trades, '(?<message>.*)'"
   script="gossip"
    omit_from_output="y"
    sequence="100"
    send_to="14"
    ><send>
    message = GetTriggerWildcard ("get_trade2", "message") or nil  -- get wildcard named 'rarity'
    player = GetTriggerWildcard ("get_trade2", "player") or nil  -- get wildcard named 'rarity'
    util.print("@x238[@x023D@x029I@x035S@x036C@x029OR@x023D@x238] @Y"..player.." @x202trades, '@w"..message.."@x202'")
    local text = "@x238[@x023D@x029I@x035S@x036C@x029OR@x023D@x238] @Y"..player.." @x202trades, '@w"..message.."@x202'"
    SendToCommLog(text)
    </send></trigger>
<trigger
    enabled="y"
    name="get_mote"
    match="You get L1 mote of *."
    omit_from_output="n"
    sequence="100"
    send_to="12"
    ><send>util.print("@x238[@x202MO@x208TE @x214OB@x220TA@x228IN@X220ED!@x238] @GMote of %1")
    local text = "@x238[@x202MO@x208TE @x214OB@x220TA@x228IN@x220ED!@x238] @GMote of %1"
    DoAfter(0.2, "use mote")
    SendToCommLog(text)
    </send></trigger>
    <trigger
    enabled="y"
    name="send_says"
    match="You say, '*'"
   script="say"
    omit_from_output="n"
    sequence="100"
    ></trigger>
<trigger
    enabled="n"
 
    match="* says, '*'"
   script="say"
    omit_from_output="n"
    sequence="100"
    ></trigger>
<trigger
    enabled="y"
    name="get_osays"
    match="* says (gossip) '*'"
   script="say"
    omit_from_output="n"
    sequence="100"
    ></trigger>
<trigger
    enabled="y"
    name="send_osays"
    match="You say (gossip) '*'"
   script="say"
    omit_from_output="n"
    sequence="100"
    ></trigger>
<trigger
    enabled="y"
    match="You tell * '*'"
    name = "send_tell"
   script="tells"
    omit_from_output="n"
    sequence="100"
    ></trigger>
<trigger
    enabled="y"
    name="get_tell"
    match="* tells you '*'"
   script="tells"
    omit_from_output="n"
    sequence="100"
    ></trigger>
<trigger
    enabled="y"
    name="get_discord"
    match="[DISCORD] * '*'"
   script="discord"
    omit_from_output="n"
    sequence="100"
    ></trigger>
<trigger
    enabled="y"
    name="send_shout"
    match="You party, '*'"
   script="shout"
    omit_from_output="n"
    sequence="100"
    ></trigger>
    <trigger
    enabled="y"
    name="send_trade"
    match="You trade, '*'"
   script="trade"
    omit_from_output="n"
    sequence="100"
    ></trigger>
<trigger
    enabled="y"
    name="get_shout"
    match="* partys, '*'"
   script="shout"
    omit_from_output="n"
    sequence="100"
    ></trigger>
<trigger
    enabled="y"
    name="get_yell"
    match="* yells '*'"
   script="yell"
    omit_from_output="n"
    sequence="100"
    ></trigger>
<trigger
    enabled="y"
    name="send_yell"
    match="You yell '*'"
   script="yell"
    omit_from_output="n"
    sequence="100"
    ></trigger>
    <trigger
    enabled="y"
    regexp="y"
    match="Your skill(| in) (?<skill>(?!in)(\w+|\w+ \w+|\w+ \w+ \w+)) (has improved|improves)!"
    omit_from_output="n"
    sequence="100"
    send_to="14"
    ><send>
    function mod(a, b)
        return a - (math.floor(a/b)*b)
      end
      
      stng = string.gsub("%2", "\s", "~")
      --c = {"{R","{Y", "{G", "{C", "{B", "{M","{m"}
      c = {"@x202", "@x208", "@x214","@x220","@x228"}
      strLen = stng:len()
      increment = 1
      startAt = 0
      lastAt = 0
      ret = ""
      for i=0, strLen -1 do
        next = lastAt + increment
       -- print(mod(i, #c))
        ret = ret .. c[mod(i, #c) + 1]..stng:sub(lastAt+1, next)
        lastAt = next
      end
        util.print("@x238[@x202SK@x208I@x214LL@x220-U@x228P@x238] @wYour skill in %2 improves!")
        text = "@x238[@x202SK@x208I@x214LL@x220-U@x228P@x238] @wYour skill in %2 improves!"
        SendToCommLog(text)
        </send>
    </trigger>
</triggers>

<!--  Script  -->

<script>
<![CDATA[

require "utility"
version = "6.40"
----------------------------------------------------------------------------------------------------------
--- VARIABLES GO HERE 
----------------------------------------------------------------------------------------------------------
tracker_tab = GetVariable("tracker_tab") or "1"
tells_tab = GetVariable("tells_tab") or "1"
newbies_tab = GetVariable("newbies_tab") or "1"
quote_tab = GetVariable("quote_tab") or "1"
grouptell_tab = GetVariable("grouptell_tab") or "1"
gossip_tab = GetVariable("gossip_tab") or "1"
trade_tab = GetVariable("trade_tab") or "1"
says_tab = GetVariable("says_tab") or "1"
info_tab = GetVariable("info_tab") or "1"
discord_tab = GetVariable("discord_tab") or "1"
shout_tab = GetVariable("shout_tab") or "1"
yell_tab = GetVariable("yell_tab") or "1"
clan_tab = GetVariable("clan_tab") or "1"
date_format = GetPluginVariable("b555825a4a5700c35fa80780", "date_format") or "%b %d %I:%M:%S%p"    -- Gets date_format variable from the Chat Window itself.
tells_visible = GetVariable("tells_visible") or "Yes"
newbies_visible = GetVariable("newbies_visible") or "Yes"
quote_visible = GetVariable("quote_visible") or "Yes"
grouptell_visible = GetVariable("grouptell_visible") or "Yes"
gossip_visible = GetVariable("gossip_visible") or "Yes"
trade_visible = GetVariable("trade_visible") or "Yes"
says_visible = GetVariable("says_visible") or "Yes"
info_visible = GetVariable("info_visible") or "Yes"
discord_visible = GetVariable("discord_visible") or "Yes"
shout_visible = GetVariable("shout_visible") or "Yes"
yell_visible = GetVariable("yell_visible") or "Yes"
clan_visible = GetVariable("clan_visible") or "Yes"
all_visible = GetVariable("all_visible") or "Yes"

----------------------------------------------------------------------------------------------------------
--- END VARIABLES
----------------------------------------------------------------------------------------------------------

dofile(GetPluginInfo(GetPluginID(), 20) .. "aardwolf_colors.lua")

function unmute()
SetTriggerOption ("send_yell", "omit_from_output", 0)
SetTriggerOption ("get_yell", "omit_from_output", 0)
SetTriggerOption ("send_shout", "omit_from_output", 0)
SetTriggerOption ("get_shout", "omit_from_output", 0)
SetTriggerOption ("info_level", "omit_from_output", 0)
SetTriggerOption ("info_kill", "omit_from_output", 0)
SetTriggerOption ("info_login", "omit_from_output", 0)
SetTriggerOption ("info_logout", "omit_from_output", 0)
SetTriggerOption ("send_says", "omit_from_output", 0)
SetTriggerOption ("get_osays", "omit_from_output", 0)
SetTriggerOption ("send_osays", "omit_from_output", 0)
SetTriggerOption ("get_discord", "omit_from_output", 0)
SetTriggerOption ("get_trade", "omit_from_output", 0)
SetTriggerOption ("send_gossip", "omit_from_output", 0)
SetTriggerOption ("get_gossip", "omit_from_output", 0)
SetTriggerOption ("get_grouptell", "omit_from_output", 0)
SetTriggerOption ("send_quote", "omit_from_output", 0)
SetTriggerOption ("get_quote", "omit_from_output", 0)
SetTriggerOption ("send_newbies", "omit_from_output", 0)
SetTriggerOption ("get_newbies", "omit_from_output", 0)
SetTriggerOption ("send_clan", "omit_from_output", 0)
SetVariable("yell_visible", "Yes")
SetVariable("shout_visible", "Yes")
SetVariable("info_visible", "Yes")
SetVariable("says_visible", "Yes")
SetVariable("discord_visible", "Yes")
SetVariable("trade_visible", "Yes")
SetVariable("gossip_visible", "Yes")
SetVariable("grouptell_visible", "Yes")
SetVariable("quote_visible", "Yes")
SetVariable("newbies_visible", "Yes")
SetVariable("tells_visible", "Yes")
SetVariable("clan_visible", "Yes")
SetVariable("all_visible", "Yes")
util.print("{GAll channels are now visible in the main output.")
end

function mute()
SetTriggerOption ("send_yell", "omit_from_output", 1)
SetTriggerOption ("get_yell", "omit_from_output", 1)
SetTriggerOption ("send_shout", "omit_from_output", 1)
SetTriggerOption ("get_shout", "omit_from_output", 1)
SetTriggerOption ("info_level", "omit_from_output", 1)
SetTriggerOption ("info_kill", "omit_from_output", 1)
SetTriggerOption ("info_login", "omit_from_output", 1)
SetTriggerOption ("info_logout", "omit_from_output", 1)
SetTriggerOption ("send_says", "omit_from_output", 1)
SetTriggerOption ("get_osays", "omit_from_output", 1)
SetTriggerOption ("send_osays", "omit_from_output", 1)
SetTriggerOption ("get_discord", "omit_from_output", 1)
SetTriggerOption ("get_trade", "omit_from_output", 1)
SetTriggerOption ("send_gossip", "omit_from_output", 1)
SetTriggerOption ("get_gossip", "omit_from_output", 1)
SetTriggerOption ("get_grouptell", "omit_from_output", 1)
SetTriggerOption ("send_quote", "omit_from_output", 1)
SetTriggerOption ("get_quote", "omit_from_output", 1)
SetTriggerOption ("send_newbies", "omit_from_output", 1)
SetTriggerOption ("get_newbies", "omit_from_output", 1)
SetTriggerOption ("send_clan", "omit_from_output", 1)
SetVariable("yell_visible", "No")
SetVariable("shout_visible", "No")
SetVariable("info_visible", "No")
SetVariable("says_visible", "No")
SetVariable("discord_visible", "No")
SetVariable("trade_visible", "No")
SetVariable("gossip_visible", "No")
SetVariable("grouptell_visible", "No")
SetVariable("newbies_visible", "No")
SetVariable("tells_visible", "No")
SetVariable("quote_visible", "No")
SetVariable("clan_visible", "No")
SetVariable("all_visible", "No")
util.print("{GAll channels are now hidden from the main output.")
end

function muteall()
if GetTriggerOption ("send_yell", "omit_from_output") == 1 then
SetTriggerOption ("send_yell", "omit_from_output", 0)
SetTriggerOption ("send_tell", "omit_from_output", 0)
SetTriggerOption ("get_tell", "omit_from_output", 0)
SetTriggerOption ("get_yell", "omit_from_output", 0)
SetTriggerOption ("send_shout", "omit_from_output", 0)
SetTriggerOption ("get_shout", "omit_from_output", 0)
SetTriggerOption ("info_level", "omit_from_output", 0)
SetTriggerOption ("info_kill", "omit_from_output", 0)
SetTriggerOption ("info_login", "omit_from_output", 0)
SetTriggerOption ("info_logout", "omit_from_output", 0)
SetTriggerOption ("send_says", "omit_from_output", 0)
SetTriggerOption ("get_osays", "omit_from_output", 0)
SetTriggerOption ("send_osays", "omit_from_output", 0)
SetTriggerOption ("get_discord", "omit_from_output", 0)
SetTriggerOption ("get_trade", "omit_from_output", 0)
SetTriggerOption ("send_gossip", "omit_from_output", 0)
SetTriggerOption ("get_gossip", "omit_from_output", 0)
SetTriggerOption ("get_grouptell", "omit_from_output", 0)
SetTriggerOption ("send_quote", "omit_from_output", 0)
SetTriggerOption ("get_quote", "omit_from_output", 0)
SetTriggerOption ("send_newbies", "omit_from_output", 0)
SetTriggerOption ("get_newbies", "omit_from_output", 0)
SetTriggerOption ("send_clan", "omit_from_output", 0)
SetVariable("yell_visible", "Yes")
SetVariable("shout_visible", "Yes")
SetVariable("info_visible", "Yes")
SetVariable("says_visible", "Yes")
SetVariable("discord_visible", "Yes")
SetVariable("trade_visible", "Yes")
SetVariable("gossip_visible", "Yes")
SetVariable("grouptell_visible", "Yes")
SetVariable("quote_visible", "Yes")
SetVariable("newbies_visible", "Yes")
SetVariable("tells_visible", "Yes")
SetVariable("clan_visible", "Yes")
SetVariable("all_visible", "Yes")
util.print("{GAll channels are now visible in the main output.")
elseif GetTriggerOption ("send_yell", "omit_from_output") == 0 then
SetTriggerOption ("send_yell", "omit_from_output", 1)
SetTriggerOption ("send_tell", "omit_from_output", 1)
SetTriggerOption ("get_tell", "omit_from_output", 1)
SetTriggerOption ("get_yell", "omit_from_output", 1)
SetTriggerOption ("send_shout", "omit_from_output", 1)
SetTriggerOption ("get_shout", "omit_from_output", 1)
SetTriggerOption ("info_level", "omit_from_output", 1)
SetTriggerOption ("info_kill", "omit_from_output", 1)
SetTriggerOption ("info_login", "omit_from_output", 1)
SetTriggerOption ("info_logout", "omit_from_output", 1)
SetTriggerOption ("send_says", "omit_from_output", 1)
SetTriggerOption ("get_osays", "omit_from_output", 1)
SetTriggerOption ("send_osays", "omit_from_output", 1)
SetTriggerOption ("get_discord", "omit_from_output", 1)
SetTriggerOption ("get_trade", "omit_from_output", 1)
SetTriggerOption ("send_gossip", "omit_from_output", 1)
SetTriggerOption ("get_gossip", "omit_from_output", 1)
SetTriggerOption ("get_grouptell", "omit_from_output", 1)
SetTriggerOption ("send_quote", "omit_from_output", 1)
SetTriggerOption ("get_quote", "omit_from_output", 1)
SetTriggerOption ("send_newbies", "omit_from_output", 1)
SetTriggerOption ("get_newbies", "omit_from_output", 1)
SetTriggerOption ("send_clan", "omit_from_output", 1)
SetVariable("yell_visible", "No")
SetVariable("shout_visible", "No")
SetVariable("info_visible", "No")
SetVariable("says_visible", "No")
SetVariable("discord_visible", "No")
SetVariable("trade_visible", "No")
SetVariable("gossip_visible", "No")
SetVariable("grouptell_visible", "No")
SetVariable("newbies_visible", "No")
SetVariable("tells_visible", "No")
SetVariable("quote_visible", "No")
SetVariable("clan_visible", "No")
SetVariable("all_visible", "No")
util.print("{GAll channels are now hidden from the main output.")
end
end

function SendToCommLog(text)
    CallPlugin(
        "b555825a4a5700c35fa80780",
        "storeFromOutside",
        os.date(GetPluginVariable("b555825a4a5700c35fa80780", "date_format"))..text
      )
  end

function tracker (name, line, wildcards, styles)
    -- print ("name = " .. name)
    tab = GetVariable("tracker_tab") or "1"
   a, b = CallPlugin("b555825a4a5700c35fa80780", "storeFromOutside", os.date(GetPluginVariable("b555825a4a5700c35fa80780", "date_format")) .. StylesToColours(styles), tab)
end -- tracker tab
  
function tells (name, line, wildcards, styles)
    -- print ("name = " .. name)
    tab = GetVariable("tells_tab") or "1"
   a, b = CallPlugin("b555825a4a5700c35fa80780", "storeFromOutside", os.date(GetPluginVariable("b555825a4a5700c35fa80780", "date_format")) .. StylesToColours(styles), tab)
end -- tells tab

function clan (name, line, wildcards, styles)
    -- print ("name = " .. name)
    tab = GetVariable("tells_tab") or "1"
   a, b = CallPlugin("b555825a4a5700c35fa80780", "storeFromOutside", os.date(GetPluginVariable("b555825a4a5700c35fa80780", "date_format")) .. StylesToColours(styles), tab)
end -- tells tab

function newbies (name, line, wildcards, styles)
    -- print ("name = " .. name)
    tab = GetVariable("newbies_tab") or "1"
   a, b = CallPlugin("b555825a4a5700c35fa80780", "storeFromOutside", os.date(GetPluginVariable("b555825a4a5700c35fa80780", "date_format")) .. StylesToColours(styles), tab)
end -- newbies tag
 
function quote (name, line, wildcards, styles)
    -- print ("name = " .. name)
    tab = GetVariable("quote_tab") or "1"
   a, b = CallPlugin("b555825a4a5700c35fa80780", "storeFromOutside", os.date(GetPluginVariable("b555825a4a5700c35fa80780", "date_format")) .. StylesToColours(styles), tab)
end -- quote tag
 
function grouptell (name, line, wildcards, styles)
    -- print ("name = " .. name)
    tab = GetVariable("grouptell_tab") or "1"
   a, b = CallPlugin("b555825a4a5700c35fa80780", "storeFromOutside", os.date(GetPluginVariable("b555825a4a5700c35fa80780", "date_format")) .. StylesToColours(styles), tab)
end -- grouptell tag
 
function gossip (name, line, wildcards, styles)
    -- print ("name = " .. name)
    tab = GetVariable("gossip_tab") or "1"
 --  a, b = CallPlugin("b555825a4a5700c35fa80780", "storeFromOutside", os.date(GetPluginVariable("b555825a4a5700c35fa80780", "date_format")) .. StylesToColours(styles), tab)
end -- gossip tab
 

function trade (name, line, wildcards, styles)
    -- print ("name = " .. name)
    tab = GetVariable("trade_tab") or "1"
   a, b = CallPlugin("b555825a4a5700c35fa80780", "storeFromOutside", os.date(GetPluginVariable("b555825a4a5700c35fa80780", "date_format")) .. StylesToColours(styles), tab)
end -- trade tab

function say (name, line, wildcards, styles)
    -- print ("name = " .. name)
    tab = GetVariable("says_tab") or "1"
   a, b = CallPlugin("b555825a4a5700c35fa80780", "storeFromOutside", os.date(GetPluginVariable("b555825a4a5700c35fa80780", "date_format")) .. StylesToColours(styles), tab)
end -- say tab

function info (name, line, wildcards, styles)
    -- print ("name = " .. name)
    tab = GetVariable("info_tab") or "1"
   a, b = CallPlugin("b555825a4a5700c35fa80780", "storeFromOutside", os.date(GetPluginVariable("b555825a4a5700c35fa80780", "date_format")) .. StylesToColours(styles), tab)
end -- info tab

function discord (name, line, wildcards, styles)
    -- print ("name = " .. name)
    tab = GetVariable("discord_tab") or "1"
   a, b = CallPlugin("b555825a4a5700c35fa80780", "storeFromOutside", os.date(GetPluginVariable("b555825a4a5700c35fa80780", "date_format")) .. StylesToColours(styles), tab)
end -- discord tab

function shout (name, line, wildcards, styles)
    -- print ("name = " .. name)
    tab = GetVariable("shout_tab") or "1"
   a, b = CallPlugin("b555825a4a5700c35fa80780", "storeFromOutside", os.date(GetPluginVariable("b555825a4a5700c35fa80780", "date_format")) .. StylesToColours(styles), tab)
end -- shout tab

function yell (name, line, wildcards, styles)
    -- print ("name = " .. name)
      tab = yell_tab or "1"
    tab = GetVariable("yell_tab") or "1"
   a, b = CallPlugin("b555825a4a5700c35fa80780", "storeFromOutside", os.date(GetPluginVariable("b555825a4a5700c35fa80780", "date_format")) .. StylesToColours(styles), tab)
end -- yell tab

function commcheck()
      util.print("{W--------------------------------------------------------------------------------")
      util.print("            {YC{yl{Ye{yf{Yt{RM{rU{RS{rH {x238Chat Window {YTab Information                            ")
      util.print("{W--------------------------------------------------------------------------------")
     -- util.print("{W The following is a list of the channels and which tab they're set to ")
     --util.print("")
      util.print("{Y            Channel List      {R-->          {Y Tab Number   {YVisible in Main Output")
      util.print("{W--------------------------------------------------------------------------------")
      util.print("")
      util.print("{Y            GroupTell         {R-->           {Y" .. (GetVariable("grouptell_tab") or 1) .."            " .. (GetVariable("grouptell_visible") or "Yes"))
      util.print("{Y            Discord           {R-->           {Y" .. (GetVariable("discord_tab") or 1) .."            " .. (GetVariable("discord_visible") or "Yes"))
      util.print("{Y            newbies             {R-->           {Y" .. (GetVariable("newbies_tab") or 1) .."            " .. (GetVariable("newbies_visible") or "Yes"))
      util.print("{Y            trade             {R-->           {Y" .. (GetVariable("trade_tab") or 1) .."            " .. (GetVariable("trade_visible") or "Yes"))
      util.print("{Y            Quote             {R-->           {Y" .. (GetVariable("quote_tab") or 1) .."            " .. (GetVariable("quote_visible") or "Yes"))
      util.print("{Y            Shout             {R-->           {Y" .. (GetVariable("shout_tab") or 1) .."            " .. (GetVariable("shout_visible") or "Yes"))
      util.print("{Y            Tells             {R-->           {Y" .. (GetVariable("tells_tab") or 1) .."            " .. (GetVariable("tells_visible") or "Yes"))
      util.print("{Y            Info              {R-->           {Y" .. (GetVariable("info_tab") or 1) .."            " .. (GetVariable("info_visible") or "Yes"))
      util.print("{Y            Says              {R-->           {Y" .. (GetVariable("says_tab") or 1) .."            " .. (GetVariable("says_visible") or "Yes"))
      util.print("{Y            Clan              {R-->           {Y" .. (GetVariable("clan_tab") or 1) .."            " .. (GetVariable("clan_visible") or "Yes"))
      util.print("{Y            Yell              {R-->           {Y" .. (GetVariable("yell_tab") or 1) .."            " .. (GetVariable("yell_visible") or "Yes"))
      util.print("{Y            gossip               {R-->           {Y" .. (GetVariable("gossip_tab") or 1) .."            " .. (GetVariable("gossip_visible") or "Yes"))
      util.print("")
      util.print("{G Use set <channel> tab <tab number> to assign a channel to a different tab")
      util.print("{G        {GI.E. {Rset tells tab 2{G to set the tells channel to tab 2  ")
      util.print("")
      util.print("{W--------------------------------------------------------------------------------")
      util.print("")
end

function chathelp()
      util.print("{W--------------------------------------------------------------------------------")
      util.print("{WPlugin Name  : {YC{yl{Ye{yf{Yt{RM{rU{RS{rH {x238Chat Window")
      util.print("{WAuthor       : {x238Asmodeus")
      util.print("{WVersion      : {G" .. version)
      util.print("{W--------------------------------------------------------------------------------")
      util.print("")
      util.print("                 {YC{yl{Ye{yf{Yt{RM{rU{RS{rH {x238Chat Window {YHelp                            ")
      util.print("{W--------------------------------------------------------------------------------")
      util.print("")
      util.print("{Y chat help                 {R-->{W Displays the help pages for the chat window")
      util.print("{Y mute <channel>            {R-->{W Mutes a specific channel from the main output")
      util.print("{Y mute all                  {R-->{W Mutes all channels from the main output")
      util.print("{Y chat check                {R-->{W Displays information about channels, which tabs")
	  util.print("{Y                              {W the channels are assigned to, and if the channels")
	  util.print("{Y                              {W are visible in the main output window")
      util.print("{Y set <channel> <tabnumber> {R-->{W Assigns a channel to the specified tab number")
      util.print("")
      util.print("{W--------------------------------------------------------------------------------")
      util.print("")
      util.print("")
end

function OnPluginInstall()
chathelp()
end


]]>
</script>
</muclient>